/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IPZappWindow;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.util.List;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.util.regex.*;
import javax.swing.ImageIcon;
import org.json.*;


/**
 *
 * @author lenovo
 */
public class EditLabelersListWindow extends javax.swing.JFrame {
    private static final String IPV4_PATTERN = "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\.(?!$)|$)){4}$";
    static File labellersListDir = new File("data" + File.separator + "labellers");
    static File labellersListFile = new File(labellersListDir.getPath(),"labellers.lab");
    private List labellersList = new ArrayList<Labeller>();
    private DefaultListModel labellersListModel = new DefaultListModel();

    /**
     * Creates new form EditLabelersListWindow
     */
    public EditLabelersListWindow() {
        initComponents();
        if(!labellersListDir.exists())
            labellersListDir.mkdirs();
        try {
            if(!labellersListFile.exists())
               labellersListFile.createNewFile();
               Scanner scanner = new Scanner(new BufferedReader(new FileReader(labellersListFile)));
               while(scanner.hasNextLine())
               {
                   JSONObject labellerJson = new JSONObject(scanner.nextLine());
                   labellersList.add(new Labeller(labellerJson.getInt("id"), labellerJson.getString("name"), labellerJson.getString("IPAddress")));
               }
               scanner.close();
               updateLabellersList();
        } 
        catch (IOException ex) 
        {
            System.out.println("Path problem");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        labellersWindowList = new javax.swing.JList<>(labellersListModel);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labellerNameTextField = new javax.swing.JTextField();
        IPAddressTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit labellers list");
        setIconImage(new ImageIcon("label printer.png").getImage());
        setLocationByPlatform(true);
        setResizable(false);

        labellersWindowList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(labellersWindowList);

        jLabel1.setText("Name:");

        jLabel2.setText("IP Address:");

        labellerNameTextField.setToolTipText("Type name you want to give");
        labellerNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                labellerNameTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                labellerNameTextFieldKeyTyped(evt);
            }
        });

        IPAddressTextField.setToolTipText("Type URL of database of labeller you want to add");

        jLabel3.setText("New labeller");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IPAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labellerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(labellerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(IPAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(addButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeButton)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String labellerName = labellerNameTextField.getText();
        String IPAddress = IPAddressTextField.getText();
        if(labellerName.isBlank())
        {
            JOptionPane.showMessageDialog(rootPane, "You have to give a name to new labeller");
            return;
        }
        if(IPAddress.isBlank() || !ifValidIP(IPAddress))
        {
            JOptionPane.showMessageDialog(rootPane, "Invalid IP Address");
            return;
        }
        try {
            PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(labellersListFile,true)));
            int labellerId = labellersList.size()+1;
            labellersList.add(new Labeller(labellerId, labellerName, IPAddress));
            String toWrite = prepareJSONString(labellerId, labellerName, IPAddress);
            writer.println(toWrite);
            writer.close();
            labellerNameTextField.setText("");
            IPAddressTextField.setText("");
            updateLabellersList();
        } 
        catch (IOException ex) 
        {
            System.out.println("IOException");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int selectedIndex = labellersWindowList.getSelectedIndex();
        if(selectedIndex == -1)
            return;
            labellersList.remove(selectedIndex);
            for(int i = 0; i < labellersList.size(); i++)
                ((Labeller)labellersList.get(i)).setId(i+1);
            updateLabellersList();
            updateLabellersFile();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void labellerNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_labellerNameTextFieldKeyTyped
        if(evt.getKeyChar() == '(' || evt.getKeyChar() == ')')
            evt.consume();
    }//GEN-LAST:event_labellerNameTextFieldKeyTyped

    private void labellerNameTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_labellerNameTextFieldKeyPressed
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            if(clipboardString.contains("(") || clipboardString.contains(")"))
                evt.consume();
        }
    }//GEN-LAST:event_labellerNameTextFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditLabelersListWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditLabelersListWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditLabelersListWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditLabelersListWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditLabelersListWindow().setVisible(true);
            }
        });
    }
    
    private static String prepareJSONString(int id, String name, String IPAddress)
    {
        String result = new String("{ \"id\" : " + id + ", \"name\" : \"" + name + "\", \"IPAddress\" : \"" + IPAddress + "\" }");
        return result;
    }
    private void updateLabellersList()
    {
        labellersListModel.clear();
        for(int i = 0; i < labellersList.size(); i++)
            labellersListModel.addElement(labellersList.get(i));
    }
    private void updateLabellersFile()
    {
        try 
        {
            PrintWriter deleter = new PrintWriter(new BufferedWriter(new FileWriter(labellersListFile)));
            deleter.write("");
            deleter.close();
            PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(labellersListFile,true)));
            for(int i = 0; i < labellersList.size(); i++)
            {
                int labellerId = ((Labeller)labellersList.get(i)).getId();
                String labellerName = ((Labeller)labellersList.get(i)).getName();
                String IPAddress = ((Labeller)labellersList.get(i)).getIPAddress();
                String toWrite = prepareJSONString(labellerId, labellerName, IPAddress);
                writer.println(toWrite);
            }
            writer.close();
        } 
        catch (IOException ex) 
        {
            System.out.println("IOException");
        }
    }
    private boolean ifValidIP(String IPAddress)
    {
        Pattern IPPattern = Pattern.compile(IPV4_PATTERN);
        Matcher matcher = IPPattern.matcher(IPAddress);
        return matcher.matches();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IPAddressTextField;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField labellerNameTextField;
    private javax.swing.JList<String> labellersWindowList;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
}
