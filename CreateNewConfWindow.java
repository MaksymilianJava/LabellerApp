/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IPZappWindow;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import IPZappWindow.labellerApp.*;

/**
 *
 * @author lenovo
 */
public class CreateNewConfWindow extends javax.swing.JFrame {
static File configurationsListDir = new File("data" + File.separator + "configurations");
private int edycja = 0;
private String name10 = new String();
    /**
     * Creates new form CreateNewConfWindow
     */
    public CreateNewConfWindow() 
    {
        initComponents();
    }
    public CreateNewConfWindow(String velocity, String distance, String startRamp, String stopRamp, String startDelay, String stopDelay, String velocityDifference, String format, String Name)
    {       
        initComponents();
        stopDelayTextField.setText(stopDelay);
        startDelayTextField.setText(startDelay);
        issuingVelocityTextField.setText(velocity);
        startRampTextField.setText(stopRamp);
        stopRampTextField.setText(startRamp);
        velocityDifferenceTextField.setText(velocityDifference);
        ejectionDistanceTextField.setText(distance);
        formatTextField.setText(format);
        nameTextField.setText(Name);
        name10=Name;
        edycja = 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        issuingVelocityTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ejectionDistanceTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        startRampTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        stopRampTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        startDelayTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        stopDelayTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        velocityDifferenceTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        formatTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuration creator");
        setIconImage(new ImageIcon("label printer.png").getImage());
        setLocationByPlatform(true);
        setResizable(false);

        jLabel1.setText("Velocity of issuing labels");

        issuingVelocityTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                issuingVelocityTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                issuingVelocityTextFieldKeyTyped(evt);
            }
        });

        jLabel2.setText("Distance of label ejection");

        ejectionDistanceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ejectionDistanceTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ejectionDistanceTextFieldKeyTyped(evt);
            }
        });

        jLabel3.setText("Start ramp");

        startRampTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                startRampTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                startRampTextFieldKeyTyped(evt);
            }
        });

        jLabel4.setText("Stop ramp");

        stopRampTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                stopRampTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stopRampTextFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Start delay");

        startDelayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                startDelayTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                startDelayTextFieldKeyTyped(evt);
            }
        });

        jLabel6.setText("Stop delay");

        stopDelayTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                stopDelayTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stopDelayTextFieldKeyTyped(evt);
            }
        });

        jLabel7.setText("Velocity difference");

        velocityDifferenceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                velocityDifferenceTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                velocityDifferenceTextFieldKeyTyped(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("m/min");

        jLabel9.setText("mm");

        jLabel10.setText("ms");

        jLabel11.setText("ms");

        jLabel12.setText("ms");

        jLabel13.setText("ms");

        jLabel14.setText("%");

        jLabel15.setText("Name");

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        jLabel16.setText("Format");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDelayTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stopDelayTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(45, 45, 45))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(40, 40, 40)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(stopRampTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(startRampTextField)
                            .addComponent(ejectionDistanceTextField)
                            .addComponent(issuingVelocityTextField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(velocityDifferenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(formatTextField))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(issuingVelocityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ejectionDistanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startRampTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopRampTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startDelayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopDelayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(velocityDifferenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void issuingVelocityTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_issuingVelocityTextFieldKeyTyped
        if(!isNumber(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_issuingVelocityTextFieldKeyTyped

    private void ejectionDistanceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ejectionDistanceTextFieldKeyTyped
        if(!isNumber(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_ejectionDistanceTextFieldKeyTyped

    private void startRampTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startRampTextFieldKeyTyped
        if(!isNumber(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_startRampTextFieldKeyTyped

    private void stopRampTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stopRampTextFieldKeyTyped
        if(!isNumber(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_stopRampTextFieldKeyTyped

    private void startDelayTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startDelayTextFieldKeyTyped
        if(!isNumber(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_startDelayTextFieldKeyTyped

    private void stopDelayTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stopDelayTextFieldKeyTyped
        if(!isNumber(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_stopDelayTextFieldKeyTyped

    private void velocityDifferenceTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_velocityDifferenceTextFieldKeyTyped
        if(isFirstDotInText(evt.getKeyChar(), velocityDifferenceTextField.getText()) && velocityDifferenceTextField.getText().isEmpty())
            evt.consume();
        else if(!isNumber(evt.getKeyChar()) && !isFirstDotInText(evt.getKeyChar(), velocityDifferenceTextField.getText()))
            evt.consume();
    }//GEN-LAST:event_velocityDifferenceTextFieldKeyTyped

    private void velocityDifferenceTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_velocityDifferenceTextFieldKeyPressed
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            //Checking if format of pasted text is correct and matches already written number
            if(clipboardString.contains(".") && velocityDifferenceTextField.getText().contains("."))
                evt.consume();
            else if(velocityDifferenceTextField.getText().isEmpty() && clipboardString.indexOf('.') == 0)
                evt.consume();
            else
            {
                int dotCounter = 0;
                for(int i = 0; i < clipboardString.length(); i++)
                {
                    if(!isNumber(clipboardString.charAt(i)))
                    {
                        if(clipboardString.charAt(i) != '.')
                        {
                            evt.consume();
                            break;
                        }
                        dotCounter++;
                        if(dotCounter > 1)
                        {
                            evt.consume();
                            break;
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_velocityDifferenceTextFieldKeyPressed

    private void issuingVelocityTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_issuingVelocityTextFieldKeyPressed
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            for(int i = 0; i < clipboardString.length(); i++)
            {
                if(!isNumber(clipboardString.charAt(i)))
                {
                    evt.consume();
                    break;
                }
            }
        }
    }//GEN-LAST:event_issuingVelocityTextFieldKeyPressed

    private void ejectionDistanceTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ejectionDistanceTextFieldKeyPressed
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            for(int i = 0; i < clipboardString.length(); i++)
            {
                if(!isNumber(clipboardString.charAt(i)))
                {
                    evt.consume();
                    break;
                }
            }
        }
    }//GEN-LAST:event_ejectionDistanceTextFieldKeyPressed

    private void startRampTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startRampTextFieldKeyPressed
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            for(int i = 0; i < clipboardString.length(); i++)
            {
                if(!isNumber(clipboardString.charAt(i)))
                {
                    evt.consume();
                    break;
                }
            }
        }
    }//GEN-LAST:event_startRampTextFieldKeyPressed

    private void stopRampTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stopRampTextFieldKeyPressed
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            for(int i = 0; i < clipboardString.length(); i++)
            {
                if(!isNumber(clipboardString.charAt(i)))
                {
                    evt.consume();
                    break;
                }
            }
        }
    }//GEN-LAST:event_stopRampTextFieldKeyPressed

    private void startDelayTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startDelayTextFieldKeyPressed
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            for(int i = 0; i < clipboardString.length(); i++)
            {
                if(!isNumber(clipboardString.charAt(i)))
                {
                    evt.consume();
                    break;
                }
            }
        }
    }//GEN-LAST:event_startDelayTextFieldKeyPressed

    private void stopDelayTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stopDelayTextFieldKeyPressed
        if(evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_V)
        {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            DataFlavor flavor = DataFlavor.stringFlavor;
            String clipboardString = "";
            try 
            {
                clipboardString = (String)clipboard.getData(flavor);
            } 
            catch (UnsupportedFlavorException ex) 
            {
                System.out.println("It is not a String");
            } 
            catch (IOException ex)
            {
                System.out.println("Input/output error");
            }
            for(int i = 0; i < clipboardString.length(); i++)
            {
                if(!isNumber(clipboardString.charAt(i)))
                {
                    evt.consume();
                    break;
                }
            }
        }
    }//GEN-LAST:event_stopDelayTextFieldKeyPressed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String stop=stopDelayTextField.getText();
        String start=startDelayTextField.getText();
        String issuing=issuingVelocityTextField.getText();
        String startRamp=startRampTextField.getText();
        String stopRamp=stopRampTextField.getText();
        String velocityDifference=velocityDifferenceTextField.getText();
        String ejection=ejectionDistanceTextField.getText();
        String format= formatTextField.getText();
        String name1= nameTextField.getText();      
        File plik = new File(configurationsListDir, name1 + ".labconf");
        WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        if(edycja==0)
        {
            if(plik.exists())
            { 
                JOptionPane.showMessageDialog(rootPane, "Configuration with this name already exists. Please change it");         
            }
            if(!(stop.isBlank() || start.isBlank() || format.isBlank() ||  issuing.isBlank()|| startRamp.isBlank()|| stopRamp.isBlank()|| velocityDifference.isBlank()|| ejection.isBlank() || name1.isBlank()) && !plik.exists())
            {
                System.out.println("jestem");
                try (PrintWriter zapis = new PrintWriter(new FileWriter(plik))) 
                {
                    zapis.print("{ \"issuingVelocity\" : " + issuing + ",");
                    zapis.print(" \"ejectionDistance\" : " + ejection + ",");
                    zapis.print(" \"startRamp\" : " + startRamp + ",");
                    zapis.print(" \"stopRamp\" : " + stopRamp + ",");
                    zapis.print(" \"startDelay\" : " + start + ",");
                    zapis.print(" \"stopDelay\" : " + stop + ",");
                    zapis.print(" \"velocityDifference\": " + velocityDifference + ",");
                    zapis.print(" \"format\" : \""+ format + "\",");
                    zapis.print(" \"name\" : \"" + name1 +  "\" }");
                    zapis.close();
                }
                catch(IOException ex)
                {
                    System.out.println(ex.getMessage());
                }
                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
                this.setVisible(false);
                this.dispose();
            }
            if(stop.isBlank() || start.isBlank() || format.isBlank() || issuing.isBlank()|| startRamp.isBlank()|| stopRamp.isBlank()|| velocityDifference.isBlank()|| ejection.isBlank())
            {
                JOptionPane.showMessageDialog(rootPane, "Forgot to fill one or more important process parameters");
            }
            if(name1.isBlank()) 
            {
                JOptionPane.showMessageDialog(rootPane, "You forgot to name configuration");          
            }
            return;
        }
        else
        {
            if(plik.exists() && !name1.equals(name10))
            { 
                JOptionPane.showMessageDialog(rootPane, "Configuration with this name already exists. Please change it");         
            }
            if(name1.equals(name10))
            {    
            if(!(stop.isBlank() || start.isBlank() || format.isBlank() || issuing.isBlank()|| startRamp.isBlank()|| stopRamp.isBlank()|| velocityDifference.isBlank()|| ejection.isBlank() || name1.isBlank()))
            {
                try (PrintWriter zapis = new PrintWriter(new FileWriter(plik))) 
                {
                    zapis.print("{ \"issuingVelocity\" : " + issuing + ",");
                    zapis.print(" \"ejectionDistance\" : " + ejection + ",");
                    zapis.print(" \"startRamp\" : " + startRamp + ",");
                    zapis.print(" \"stopRamp\" : " + stopRamp + ",");
                    zapis.print(" \"startDelay\" : " + start + ",");
                    zapis.print(" \"stopDelay\" : " + stop + ",");
                    zapis.print(" \"velocityDifference\": " + velocityDifference + ",");
                    zapis.print(" \"format\" : \""+ format + "\",");
                    zapis.print(" \"name\" : \"" + name1 +  "\" }");
                    zapis.close();
                }
                catch(IOException ex)
                {
                    System.out.println(ex.getMessage());
                }                
                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
                this.setVisible(false);
                this.dispose();  
            }
            }
            else
            {
            if(!(stop.isBlank() || start.isBlank() || format.isBlank() || issuing.isBlank()|| startRamp.isBlank()|| stopRamp.isBlank()|| velocityDifference.isBlank()|| ejection.isBlank() || name1.isBlank()) && !plik.exists())
            {
                try (PrintWriter zapis = new PrintWriter(new FileWriter(plik))) 
                {
                    zapis.print("{ \"issuingVelocity\" : " + issuing + ",");
                    zapis.print(" \"ejectionDistance\" : " + ejection + ",");
                    zapis.print(" \"startRamp\" : " + startRamp + ",");
                    zapis.print(" \"stopRamp\" : " + stopRamp + ",");
                    zapis.print(" \"startDelay\" : " + start + ",");
                    zapis.print(" \"stopDelay\" : " + stop + ",");
                    zapis.print(" \"velocityDifference\": " + velocityDifference + ",");
                    zapis.print(" \"format\" : \""+ format + "\",");
                    zapis.print(" \"name\" : \"" + name1 +  "\" }");
                    zapis.close();
                }
                catch(IOException ex)
                {
                    System.out.println(ex.getMessage());
                }
                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
                this.setVisible(false);
                this.dispose();
            }
            }
            if(stop.isBlank() || start.isBlank() || format.isBlank() || issuing.isBlank()|| startRamp.isBlank()|| stopRamp.isBlank()|| velocityDifference.isBlank()|| ejection.isBlank())
            {
                JOptionPane.showMessageDialog(rootPane, "Forgot to fill one or more important process parameters");
            }
            if(name1.isBlank()) 
            {
                JOptionPane.showMessageDialog(rootPane, "You forgot to name configuration");          
            }
            return;
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed
         
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateNewConfWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateNewConfWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateNewConfWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateNewConfWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateNewConfWindow().setVisible(true);
            }
        });
    }  
    private boolean isNumber(char typedChar)
    {
        if(typedChar >= '0' && typedChar <= '9')
            return true;
        return false;
    }
    private boolean isFirstDotInText(char typedChar, String checkedText)
    {
        if(typedChar == '.' && !checkedText.contains("."))
            return true;
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField ejectionDistanceTextField;
    private javax.swing.JTextField formatTextField;
    private javax.swing.JTextField issuingVelocityTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField startDelayTextField;
    private javax.swing.JTextField startRampTextField;
    private javax.swing.JTextField stopDelayTextField;
    private javax.swing.JTextField stopRampTextField;
    private javax.swing.JTextField velocityDifferenceTextField;
    // End of variables declaration//GEN-END:variables
}
